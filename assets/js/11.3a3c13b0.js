(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{409:function(a,e,r){"use strict";r.r(e);var t=r(56),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"infrastructure"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure"}},[a._v("#")]),a._v(" Infrastructure")]),a._v(" "),r("h2",{attrs:{id:"directory-structure"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#directory-structure"}},[a._v("#")]),a._v(" Directory Structure")]),a._v(" "),r("p",[a._v("Contoh struktur folder")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("├── infrasctructure\n│   ├── product\n│   │   ├── data_sources\n│   │   │   ├── product_local_data_provider.dart (jika data dari local)\n│   │   │   └── product_remote_data_provider.dart (jika data dari server)\n│   │   ├── product_dtos.dart\n│   │   ├── product_dtos.freezed.dart (generated file)\n│   │   ├── product_dtos.g.dart (generated file)\n│   │   └── product_repository.dart\n")])])]),r("ul",[r("li",[r("code",[a._v("product/data_sources/product_local_data_provider.dart")]),a._v(": file yang mengatur proses pengambilan atau perubahan data yang terjadi secara lokal.")]),a._v(" "),r("li",[r("code",[a._v("product/data_sources/product_remote_data_provider.dart")]),a._v(": file yang mengatur proses pengambilan atau perubahan data yang terjadi di server.")]),a._v(" "),r("li",[r("code",[a._v("product/product_dtos.dart")]),a._v(": merupakan file yang menampung objek data product.")]),a._v(" "),r("li",[r("code",[a._v("product/product_repository")]),a._v(": merupakan file yang berisi class implementasi dari "),r("code",[a._v("interface repository")]),a._v(".")])]),a._v(" "),r("h2",{attrs:{id:"dto-data-transfer-object"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dto-data-transfer-object"}},[a._v("#")]),a._v(" DTO (Data Transfer Object)")]),a._v(" "),r("p",[a._v("Merupakan class model yang menampung data untuk/dari extenal layer (local or remote data provider).")]),a._v(" "),r("h3",{attrs:{id:"source-code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#source-code"}},[a._v("#")]),a._v(" Source Code")]),a._v(" "),r("p",[a._v("Pada pembuata DTO, kami menggunakan bantuan dari "),r("a",{attrs:{href:"https://link",target:"_blank",rel:"noopener noreferrer"}},[a._v("Freezed"),r("OutboundLink")],1),a._v(", "),r("a",{attrs:{href:"https://link",target:"_blank",rel:"noopener noreferrer"}},[a._v("JsonAnnotation"),r("OutboundLink")],1),a._v(". Contoh dari penerapan DTO:")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("part 'product_dtos.freezed.dart';\npart 'product_dtos.g.dart';\n\n@freezed\nclass ProductDto with _$ProductDto {\n  const ProductDto._();\n  const factory ProductDto({\n    @JsonKey(name: 'id') required String id,\n    @JsonKey(name: 'product_name') required String name,\n    @JsonKey(name: 'product_description') required String description,\n    @JsonKey(name: 'product_price') required double price,\n  }) = _ProductDto;\n\n  // WAJIB, untuk generate model ProductDto yang nantinya digunakan untuk parsing ke/dari JSON\n  factory ProductDto.fromJson(Map<String, dynamic> json) =>\n      _$ProductDtoFromJson(json);\n\n  // untuk generate model ProductDto dari domain Product.\n  factory ProductDto.fromDomain(Product product) => ProductDto(\n        id: product.id.getOrCrash(),\n        name: product.name.getOrCrash(),\n        description: product.description.getOrCrash(),\n        price: product.price.getOrCrash().toDouble(),\n      );\n\n  // untuk generate domain Product dari model ProductDto\n  Product toDomain() => Product(\n        id: UniqueId.fromUniqueString(id),\n        name: ProductName(name),\n        description: ProductDescription(description),\n        price: ProductPrice(price),\n      );\n}\n")])])]),r("h3",{attrs:{id:"rule"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rule"}},[a._v("#")]),a._v(" Rule")]),a._v(" "),r("ul",[r("li",[a._v("Penamaan file dalam bentuk ditambahkan "),r("code",[a._v("_dtos.dart")])]),a._v(" "),r("li",[a._v("Penamaan class atau file dalam bahasa inggris.")])]),a._v(" "),r("h2",{attrs:{id:"local-or-remote-data-provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#local-or-remote-data-provider"}},[a._v("#")]),a._v(" Local or Remote Data Provider")]),a._v(" "),r("p",[a._v("merupakan class yang hanya mengatur proses pengambilan, pengiriman dan perubahan data. Dapat dilakukan oleh lokal (Database local) atau pada remote (Server melalui API). Pada file ini proses "),r("strong",[a._v("HANYA")]),a._v(" terbatas untuk proses tersebut.")]),a._v(" "),r("h3",{attrs:{id:"source-code-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#source-code-2"}},[a._v("#")]),a._v(" Source Code")]),a._v(" "),r("p",[a._v("Ini merupakan contoh dari penerapan "),r("code",[a._v("RemoteDataProvider")]),a._v(".")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("@injectable\nclass ProductRemoteDataProvider {\n    final ApiClient _apiClient;\n\n    ProductRemoteDataProvider(this._apiClient);\n\n    Future<DC<ApiFailure, List<ProductDto>>> fetchProducts() async {\n        try {\n        final response = await _apiClient.get(ApiPath.getProducts);\n\n        // return when success\n        if (response.statusCode == 200) {\n            final items = response.data['items'] as List;\n            final dtos = items\n                .map((e) => ProductDto.fromJson(e as Map<String, dynamic>))\n                .toList();\n            return DC.data(dtos);\n        }\n\n        // return when failure\n        return DC.error(\n          ApiFailure.serverFailure(code: response.statusCode, errMessage: response.statusMessage,));\n        } on ApiFailure catch (e) {\n            return DC.error(e);\n        } catch (e) {\n            // return when unexpected error happens.\n            return DC.error(const ApiFailure.unexpectedFailure());\n        }\n  }\n}\n")])])]),r("h3",{attrs:{id:"rule-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rule-2"}},[a._v("#")]),a._v(" Rule")]),a._v(" "),r("ul",[r("li",[a._v("Penamaan file dan class ditulis dalam bahasa inggris")]),a._v(" "),r("li",[r("code",[a._v("return")]),a._v(" value dari setiap method/fungsinya menggunakan bantuan dari "),r("a",{attrs:{href:"https://pub.dev/packages/data_channel",target:"_blank",rel:"noopener noreferrer"}},[a._v("DataChannel"),r("OutboundLink")],1),a._v(" "),r("code",[a._v("Future<DC<ApiFailure, DataTypeWhenSuccess>>")])]),a._v(" "),r("li",[r("strong",[a._v("WAJIB")]),a._v(" menggunakan "),r("code",[a._v("try-catch")]),a._v(".")]),a._v(" "),r("li",[a._v("Pada "),r("code",[a._v("remoteDataProvider")]),a._v(" Terdapat "),r("code",[a._v("catch")]),a._v(" untuk "),r("code",[a._v("ApiFailure")]),a._v(" untuk meng-handle error yang disebabkan oleh response API.")])]),a._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),r("p",[a._v("Untuk memudahkan programmer dalam men-trace error, dapat menggunakan bantuan "),r("code",[a._v("debutPrint()")]),a._v(" atau "),r("code",[a._v("log()")])])]),a._v(" "),r("h2",{attrs:{id:"repository"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[a._v("#")]),a._v(" Repository")]),a._v(" "),r("p",[a._v("Class ini merupakan class yang menerapkan "),r("a",{attrs:{href:"https://link",target:"_blank",rel:"noopener noreferrer"}},[a._v("Interface Repository"),r("OutboundLink")],1),a._v(".")]),a._v(" "),r("h3",{attrs:{id:"sourcecode"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sourcecode"}},[a._v("#")]),a._v(" SourceCode")]),a._v(" "),r("p",[a._v("Contoh dari "),r("code",[a._v("repository")]),a._v(":")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("@Injectable(as: IProductRepository)\nclass ProductRepository implements IProductRepository {\n  final ProductRemoteDataProvider _remoteDataProvider;\n\n  ProductRepository(this._remoteDataProvider);\n\n  @override\n  Future<Either<AppException, KtList<Product>>> loadProducts() async {\n    try {\n      final response = await _remoteDataProvider.fetchProducts();\n      if (response.hasError) {\n        return left(response.error!);\n      }\n\n      final products =\n          response.data!.map((e) => e.toDomain()).toImmutableList();\n\n      return right(products);\n    } catch (e, s) {\n      log('loadProducts', name: 'ProductRepository', error: e, stackTrace: s);\n      return left(const AppException.unexpectedException());\n    }\n  }\n\n  ...\n}\n")])])]),r("h3",{attrs:{id:"rule-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rule-3"}},[a._v("#")]),a._v(" Rule")]),a._v(" "),r("ul",[r("li",[a._v("Nama class harus sama dengan nama Interfacenya (dihilangkan huruf I)")]),a._v(" "),r("li",[a._v("Terdapat "),r("code",[a._v("try-catch")])]),a._v(" "),r("li",[a._v("Terdapat pengecekan "),r("code",[a._v("response.hasError")])]),a._v(" "),r("li",[a._v("Untuk mempermudah programmer dalam trace error, dapat menggunakan bantuakn "),r("code",[a._v("log()")]),a._v(".")])])])}),[],!1,null,null,null);e.default=n.exports}}]);